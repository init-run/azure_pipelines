# Repo Tagging template
parameters:
  tagVersion: ''
  repoId: ''

steps:
  # Ensure the az cli exists
  - script: az extension add -n azure-devops
    displayName: 'Install Azure DevOps Extension'

  # Login using the system access token
  - script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
    env:
      AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
    displayName: 'Login Azure DevOps Extension'

  # Configure organization and project
  - script: az devops configure --defaults organization=$(my_org) project=$(my_project) --use-git-aliases true
    displayName: 'Set default Azure DevOps organization and project'

  # Script to TAG an Azure Devops Git Repo using the BuildNumber
  # Checks for all tags in the repo for duplicates
  # BUILD_BUILDNUMBER is an environment variable corresponding to the ADO pipeline variable $(Build.BuildNumber)
  - script: |
      # Populate Bash array with all Git Tags and Check for CURRENT_TAG (aka build number)

      check_for_tags () {
      
      echo "Checking for existing Tags"
      tag_list=($(git tag -l))

      for TAG in "${tag_list[@]}"
      do
        echo $TAG
        if [ "$BUILD_BUILDNUMBER" == "$TAG" ]; then
          echo "Tag $TAG already exists!"
          exit 1
        fi
      done

      }

      # Check exit status of check_for_tags function, if successful move on. If failed, then report Duplicate Tag. 

      check_for_tags

      if [ "$?" -eq 1 ]; then
        echo "$BUILD_BUILDNUMBER is a duplicate tag, exiting!"
      else
        echo "Tagging Repo with $BUILD_BUILDNUMBER"
        az repos ref create --name tags/${{ parameters.tagVersion }} --object-id ${{ parameters.repoId}} > tag_result.txt
        RESULT=$(sed -e 's/ //g' -e 's/,//g' tag_result.txt | grep success | cut -f2 -d:)
        RESULT_MESSAGE=$(sed -e 's/ //g' -e 's/,//g' tag_result.txt | grep updateStatus | cut -f2 -d:)

        if [ $RESULT == "true" ]; then
          echo "Successfully tagged repo"
          exit 0

        # If we get this message, the tag might still have been created, so run check_for_tags again to verify
        
        elif [ $RESULT_MESSAGE == "\"staleOldObjectId\"" ]; then
          check_for_tags
          if [ "$?" -eq 0 ]; then
            echo "$BUILD_BUILDNUMBER was created moving to next step"
            exit 0
          else
            echo "Tag was not created exiting"
            exit 1
          fi
        else
          echo "Tagging failed, check response" ; cat tag_result.txt ; exit 1 ;
        fi
      fi

      # Clean Up our temp file

      rm -rf tag_result.txt

    displayName: 'Tagging Repo'

  # Logout AZ devops (clears stored PAT token)
  - script: az devops logout
    displayName: 'AZ Devops Logout'
