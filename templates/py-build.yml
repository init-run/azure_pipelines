# Python Build Step template

parameters:
  workingDirectory: ''
  pythonRequirments: ''
  buildVersion: ''
  artifactName: ''

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

# Grab the latest Git tag and set that to an environment variable
- script: |
    echo "Setting packageVersion to BuildVersion"
    export packageVersion=${{ parameters.buildVersion }}
    echo $packageVersion
  displayName: 'Set Package Version'
  workingDirectory: ${{ parameters.WorkingDirectory }}

# Setup VirtualEnv and Install requirements
- script: |
    echo "Creating new virtualenv"
    python3 -m venv --clear .env
    source .env/bin/activate
    python3 -m pip install -r ${{ parameters.pythonRequirements }}
  displayName: 'Setup VirtualEnv & Requirements'
  workingDirectory: ${{ parameters.workingDirectory }}

# Install Setup Tools
- script: |
    echo "Installing setuptools, wheel"
    source .env/bin/activate
    python3 -m pip install --upgrade pip setuptools wheel
  displayName: 'Install SetupTools'
  workingDirectory: ${{ parameters.WorkingDirectory }}

# Build our package
- script: |
    echo "Running setup.py"
    source .env/bin/activate
    python setup.py sdist bdist_wheel
  displayName: 'Building Package with SetupTools'
  workingDirectory: ${{ parameters.WorkingDirectory }}

# Deactivate Virtual Environment and Clean-up
- script: |
    echo "Cleaning up Virtual Environment"
    if [ -d ".env" ]; then echo "removing virtual environment" ; rm -rf .env ; else echo ".env directory doesn't exist" ; fi
    pip freeze
  displayName: 'Destroy VirtualEnv'
  workingDirectory: ${{ parameters.workingDirectory }}

# Create Pipeline Artifact
- task: PublishPipelineArtifact@0
  displayName: 'Create Pipeline Artifact'
  inputs:
    artifactType: pipeline
    artifactName: ${{ parameters.artifactName }}-${{ parameters.buildVersion }}
    targetPath: ${{ parameters.workingDirectory }}/dist